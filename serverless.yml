service: youareawesomeapp
# app and org for use with dashboard.serverless.com
app: youareawesomeapp
org: prosingularity

# https://www.serverless.com/plugins/
plugins:
  - serverless-plugin-typescript
  - serverless-offline # must come after typescript
  - serverless-s3-sync
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts

# only deploy with specific Serverless version
frameworkVersion: ^2.48.0
configValidationMode: error
useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, "eu-central-1"}
  stage: ${opt:stage, "prod"}
  profile: serverless
  lambdaHashingVersion: 20201221

functions:
  reportInappropriate:
    handler: src/report-inappropriate.handler
    events:
      - http:
          path: "/reportinappropriate/"
          method: post
    environment:
      SMTP_HOST: ${env:SMTP_HOST}
      SMTP_USERNAME: ${env:SMTP_USERNAME}
      SMTP_PASSWORD: ${env:SMTP_PASSWORD}
      SMTP_PORT: ${env:SMTP_PORT}
      USE_SSL: ${env:USE_SSL}
      TO_EMAILS_CSV: ${env:TO_EMAILS_CSV}
      FROM_ADDRESS: ${env:FROM_ADDRESS}

  writeContributionToGsheet:
    handler: src/contributions/index.writeContributionToGsheet
    events:
      - http:
          path: contributions
          method: post
    environment:
      CONTRIBUTIONS_SPREADSHEET_ID: ${env:CONTRIBUTIONS_SPREADSHEET_ID}
      CONTRIBUTIONS_GOOGLE_EMAIL: ${env:CONTRIBUTIONS_GOOGLE_EMAIL}
      CONTRIBUTIONS_GOOGLE_PRIVATE_KEY: ${env:CONTRIBUTIONS_GOOGLE_PRIVATE_KEY}

  registerPushNotif:
    handler: src/register-push-notification.handler
    events:
      - http:
          path: "/push-notifications/register/"
          method: post
    environment:
      CRON_JOB_NAME_PREFIX: "yaa-push-notifications-"
      PUSH_NOTIFICATIONS_BACKEND_URI:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
            - /push-notifications/send/
            - ${env:SEND_PUSH_NOTIF_ENDPOINT}/
      EASY_CRON_API_TOKEN: ${env:EASY_CRON_API_TOKEN}
      HASH_PASSWORD: ${env:HASH_PASSWORD}
      SYMMETRIC_ENCRYPTION_KEY: ${env:SYMMETRIC_ENCRYPTION_KEY}

  unregisterPushNotif:
    handler: src/unregister-push-notification.handler
    events:
      - http:
          path: "/push-notifications/unregister/"
          method: post
    environment:
      CRON_JOB_NAME_PREFIX: "yaa-push-notifications-"
      EASY_CRON_API_TOKEN: ${env:EASY_CRON_API_TOKEN}
      HASH_PASSWORD: ${env:HASH_PASSWORD}

  sendPushNotif:
    handler: src/send-push-notification.handler
    events:
      - http:
          path: "/push-notifications/send/${env:SEND_PUSH_NOTIF_ENDPOINT}/"
          method: post
    environment:
      FETCH_POSTS_URI: ${env:FETCH_POSTS_URI}
      SYMMETRIC_ENCRYPTION_KEY: ${env:SYMMETRIC_ENCRYPTION_KEY}

  # only called via RPC => no events
  gsx2json:
    handler: src/gsx2json/index.handler
    environment:
      MESSAGES_SPREADSHEET_PUBLIC_ID: "2PACX-1vR83yDqRha4RaBeqzPnX6xh1I9PqndL2E_p8Ks9AzUp7KFae5fxlgWxDcVN4f8G41x3BtKQwz5M_ujM"

  exportMessagesToS3:
    handler: src/export-messages-to-s3.handler
    environment:
      REGION: ${self:provider.region}
      GSX2JSON_LAMBDA_ARN:
        Fn::GetAtt: [Gsx2jsonLambdaFunction, Arn] # doesnt work with sls-offline
      BUCKET_NAME: ${self:service}-current-message
    events:
      # enable for dev
      # - http:
      #     path: "/manually-trigger-export-to-s3/"
      #     method: get
      - schedule:
          rate: rate(1 day)
          description: "Invoke export of Awesome Messages to S3 ${self:service}-current-messages"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource:
          - Fn::GetAtt: [Gsx2jsonLambdaFunction, Arn]
      - Effect: Allow
        Action:
          - s3:PutObject*
        Resource:
          - Fn::Join:
              - ""
              - - Fn::GetAtt: [CurrentMessageBucket, Arn]
                - "/*"

# https://www.serverless.com/framework/docs/providers/aws/guide/resources/
resources:
  Resources:
    CurrentMessageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-current-message
    legal:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-legal
        VersioningConfiguration:
          Status: Enabled

custom:
  # https://www.serverless.com/plugins/serverless-s3-sync
  s3Sync:
    - bucketName: ${self:service}-legal
      localDir: assets
      acl: public-read
      followSymlinks: false

  # https://www.serverless.com/plugins/serverless-plugin-aws-alerts
  alerts:
    stages:
      - prod
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${env:ALERT_EMAIL}
    alarms:
      - functionErrors
